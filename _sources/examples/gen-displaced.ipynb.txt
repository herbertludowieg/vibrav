{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generating the displaced structures from a Gaussian frequencies calculation\n",
    "\n",
    "Requirements:\n",
    "\n",
    " - A vibrational frequencies calculation on a well optimized structure\n",
    "\n",
    "The vibrational frequencies should have the highest precision possible as the displacements made are small to remain in the harmonic approximztion. In gaussian this can be done from the normal output with the `Freq=(HPModes)` or with the formatted checkpoint file. The frequencies must be saved to the checkpoint file which is not a default with `Freq=(SaveNormalModes)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from vibrav.util.io import uncompress_file\n",
    "from vibrav.base import resource\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This next step is only to decompress the resource output file. In most user cases this can be skipped as the output files are not compressed binaries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "decomp = uncompress_file(resource('g16-nitromalonamide-freq.out.xz'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the quantum code parser of choice and get the atom, frequency and extended frequency data frames. In this case we are using the gaussian parser from the *Exatomic* package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from exa import logging\n",
    "logging.disable()\n",
    "from exatomic import gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parsing frequency normal modes from HPModes output\n",
      "Parsing frequency normal modes from HPModes output\n"
     ]
    }
   ],
   "source": [
    "ed = gaussian.Output(decomp)\n",
    "ed.parse_atom()\n",
    "ed.parse_frequency()\n",
    "ed.parse_frequency_ext()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove the uncompressed file for some clean up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.remove(decomp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating the displaced structures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from vibrav.util.gen_displaced import Displace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs = Displace(cls=ed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `disp` class attribute holds the coordinates of all the displaced coordinates that are generated. The frequency indeces are as follows:\n",
    " - 0 is reserved for the equilibrium structure\n",
    " - From 1 up to and including the number of normal modes (39 in this example) are the ones displaced in the positive direction.\n",
    " - From the number of normal modes plus 1 (40 in this example) up to and including twice the number of normal modes (78 in this example) are the negative displacements.\n",
    " \n",
    "It should be mentioned that the positive and negative displacements are completely arbitrary. Meaning, that we only multiply the normal modes by +1 or -1 for the positive and negative displacements, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>freqdx</th>\n",
       "      <th>Z</th>\n",
       "      <th>symbol</th>\n",
       "      <th>frequency</th>\n",
       "      <th>frame</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>atom</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.213964</td>\n",
       "      <td>-4.244614</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-5.885437</td>\n",
       "      <td>-2.178947</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-4.921215</td>\n",
       "      <td>1.041846</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.295407</td>\n",
       "      <td>-0.573277</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.506458</td>\n",
       "      <td>2.260056</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1180</th>\n",
       "      <td>-1.771898</td>\n",
       "      <td>-4.006233</td>\n",
       "      <td>0.0</td>\n",
       "      <td>78</td>\n",
       "      <td>8</td>\n",
       "      <td>O</td>\n",
       "      <td>3696.3886</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1181</th>\n",
       "      <td>-0.358161</td>\n",
       "      <td>2.748341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>78</td>\n",
       "      <td>7</td>\n",
       "      <td>N</td>\n",
       "      <td>3696.3886</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1182</th>\n",
       "      <td>1.505387</td>\n",
       "      <td>4.175983</td>\n",
       "      <td>0.0</td>\n",
       "      <td>78</td>\n",
       "      <td>8</td>\n",
       "      <td>O</td>\n",
       "      <td>3696.3886</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1183</th>\n",
       "      <td>-2.542736</td>\n",
       "      <td>3.630069</td>\n",
       "      <td>0.0</td>\n",
       "      <td>78</td>\n",
       "      <td>8</td>\n",
       "      <td>O</td>\n",
       "      <td>3696.3886</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1184</th>\n",
       "      <td>-4.537880</td>\n",
       "      <td>-0.833527</td>\n",
       "      <td>0.0</td>\n",
       "      <td>78</td>\n",
       "      <td>7</td>\n",
       "      <td>N</td>\n",
       "      <td>3696.3886</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1185 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "exatomic.core.atom.Atom(1185, 8)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs.disp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate the 'xyz' coordinate files to view later if something goes wrong."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "xyz_dir = 'xyz'\n",
    "if not os.path.exists(xyz_dir):\n",
    "    os.mkdir(xyz_dir)\n",
    "for frame in range(inputs.disp.nframes):\n",
    "    filename = 'nitromal-{:03d}.xyz'.format(frame)\n",
    "    xyz_file = os.path.join(xyz_dir, filename)\n",
    "    with open(xyz_file, 'w') as fn:\n",
    "        comments = \"{:03d} displacement for nitromalonamide\".format(frame)\n",
    "        fn.write(inputs.disp.to_xyz(header=True, comments=comments,\n",
    "                                    frame=frame))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the templates for the gaussian input files to be generated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "grad_template = '''\\\n",
    "%Mem={mem}\n",
    "%Chk={chk}\n",
    "%NProc={nproc}\n",
    "#P Force B3LYP/6-311++G** SCF=Tight Int=UltraFine NoSymm\n",
    "\n",
    "{comment}\n",
    "\n",
    "{charge} {mult}\n",
    "{coord}\n",
    "'''\n",
    "prop_template = '''\\\n",
    "%Mem={mem}\n",
    "%Chk={chk}\n",
    "%NProc={nproc}\n",
    "#P PBE1PBE/cc-pVDZ NMR SCF=Tight Int=UltraFine NoSymm\n",
    "\n",
    "{comment}\n",
    "\n",
    "{charge} {mult}\n",
    "{coord}\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate the gradient inputs with a B3LYP/6-311++G** functional and basis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_dir = 'input'\n",
    "if not os.path.exists(input_dir):\n",
    "    os.mkdir(input_dir)\n",
    "for frame in range(inputs.disp.nframes):\n",
    "    filename = 'nitromal-grad-{:03d}.inp'.format(frame)\n",
    "    grad_file = os.path.join(input_dir, filename)\n",
    "    with open(grad_file, 'w') as fn:\n",
    "        comment = \"Gradient calculation for the {:03d} \".format(frame) \\\n",
    "                  +\"displacement of nitromalonamide\"\n",
    "        nproc = 2\n",
    "        mem = \"1GB\"\n",
    "        chk = \"chk-{:03d}.chk\".format(frame)\n",
    "        charge = 0\n",
    "        mult = 1\n",
    "        coord = inputs.disp.to_xyz(header=False, frame=frame)\n",
    "        fn.write(grad_template.format(mem=mem, chk=chk, nproc=nproc,\n",
    "                                      comment=comment, charge=charge,\n",
    "                                      mult=mult, coord=coord))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate the NMR property inputs with a PBE1PBE/cc-pVDZ functional and basis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_dir = 'input'\n",
    "if not os.path.exists(input_dir):\n",
    "    os.mkdir(input_dir)\n",
    "for frame in range(inputs.disp.nframes):\n",
    "    filename = 'nitromal-prop-{:03d}.inp'.format(frame)\n",
    "    prop_file = os.path.join(input_dir, filename)\n",
    "    with open(prop_file, 'w') as fn:\n",
    "        comment = \"Property calculation for the {:03d} \".format(frame) \\\n",
    "                  +\"displacement of nitromalonamide\"\n",
    "        nproc = 2\n",
    "        mem = \"1GB\"\n",
    "        chk = \"chk-{:03d}.chk\".format(frame)\n",
    "        charge = 0\n",
    "        mult = 1\n",
    "        coord = inputs.disp.to_xyz(header=False, frame=frame)\n",
    "        fn.write(prop_template.format(mem=mem, chk=chk, nproc=nproc,\n",
    "                                      comment=comment, charge=charge,\n",
    "                                      mult=mult, coord=coord))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make sure that the output directory is present. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "output_dir = 'output'\n",
    "if not os.path.exists(output_dir):\n",
    "    os.mkdir(output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
